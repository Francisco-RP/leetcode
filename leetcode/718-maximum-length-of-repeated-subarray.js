const assert = require("node:assert");
const { describe, test } = require("node:test");

// https://leetcode.com/problems/maximum-length-of-repeated-subarray/
// https://leetcode.com/problems/maximum-length-of-repeated-subarray/solutions/1324994/maximum-length-of-repeated-subarray-javascript-simple-solution/

/**
 * Given two integer arrays nums1 and nums2, return the maximum length of a subarray
 * that appears in both arrays.
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number}
 */
const findLength = function (nums1, nums2) {
  const m = nums1.length;
  const n = nums2.length;

  // 1-d array
  const dp = new Array(n + 1).fill(0);

  let max = 0;

  for (let i = 1; i <= m; i++) {
    const prev = dp.slice(); // copy the previous array
    for (let j = 1; j <= n; j++) {
      const n1 = nums1[i - 1];
      const n2 = nums2[j - 1];
      if (n1 === n2) {
        dp[j] = 1 + prev[j - 1];
        max = Math.max(max, dp[j]);
      } else {
        dp[j] = 0;
      }
    }
  }

  return max;
};

describe("findLength", function () {
  test("Test Case 1", function () {
    const nums1 = [1, 2, 3, 2, 1],
      nums2 = [3, 2, 1, 4, 7];
    const actual = findLength(nums1, nums2);
    const expected = 3;
    assert.strictEqual(actual, expected);
  });

  test("Test Case 2", function () {
    const nums1 = [0, 0, 0, 0, 0],
      nums2 = [0, 0, 0, 0, 0];
    const actual = findLength(nums1, nums2);
    const expected = 5;
    assert.strictEqual(actual, expected);
  });

  test("Test Case 3", function () {
    const nums1 = [0, 1, 1, 1, 1],
      nums2 = [1, 0, 1, 0, 1];
    const actual = findLength(nums1, nums2);
    const expected = 2;
    assert.strictEqual(actual, expected);
  });

  test("Test Case 4", function () {
    const nums1 = [
        27, 26, 13, 98, 73, 14, 35, 45, 11, 72, 6, 31, 55, 80, 87, 24, 81, 75, 53, 22, 46, 9, 22,
        85, 60, 87, 56, 35, 12, 49, 80, 33, 30, 56, 29, 77, 28, 99, 52, 37, 82, 20, 43, 62, 32, 2,
        3, 54, 58, 10, 92, 70, 5, 68, 82, 86, 95, 6, 73, 92, 97, 7, 34, 5, 78, 57, 10, 70, 78, 92,
        81, 94, 72, 62, 3, 94, 57, 29, 26, 48, 88, 74, 76, 75, 20, 94, 38, 87, 22, 12, 3, 12, 13,
        58, 62, 43, 43, 74, 66, 99,
      ],
      nums2 = [
        50, 88, 0, 77, 54, 73, 76, 53, 17, 5, 25, 42, 42, 95, 31, 32, 10, 54, 94, 2, 65, 38, 86, 70,
        98, 31, 27, 84, 77, 78, 41, 4, 81, 32, 82, 92, 22, 49, 6, 21, 32, 8, 80, 67, 12, 27, 41, 16,
        62, 12, 45, 27, 34, 39, 54, 37, 24, 90, 73, 54, 48, 85, 3, 67, 42, 52, 97, 18, 69, 26, 22,
        80, 39, 11, 47, 60, 9, 58, 53, 9, 91, 7, 0, 29, 43, 55, 55, 43, 21, 13, 97, 4, 98, 60, 21,
        78, 74, 15, 23, 74,
      ];
    const actual = findLength(nums1, nums2);
    const expected = 1;
    assert.strictEqual(actual, expected);
  });

  test("Test Case 5", function () {
    const nums1 = [
        55, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
        71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
        71, 71, 71, 71, 71, 13, 33, 13, 44, 28, 42, 83, 29, 72, 49, 17, 21, 36, 98, 37, 60, 17, 30,
        12, 88, 86, 96, 54, 33, 85, 95, 2, 49, 6, 99, 93, 68, 29, 56, 23, 29, 37, 1, 31, 36, 51, 40,
        56, 54, 45, 73, 51, 68, 15,
      ],
      nums2 = [
        70, 18, 72, 57, 68, 67, 86, 12, 37, 10, 43, 71, 31, 97, 70, 36, 93, 3, 48, 81, 93, 8, 48,
        56, 15, 63, 33, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
        71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
        71, 71, 71, 71, 71, 71, 71, 71, 85, 15, 13, 24, 79, 3, 69, 82, 84, 68, 61, 22, 73, 82, 11,
        18, 52, 45, 81, 91, 87, 47, 47,
      ];
    const actual = findLength(nums1, nums2);
    const expected = 50;
    assert.strictEqual(actual, expected);
  });

  test("Test Case 6", function () {
    const nums1 = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
      nums2 = [0, 0, 0, 0, 0, 0, 0, 1, 0, 0];
    const actual = findLength(nums1, nums2);
    const expected = 9;
    assert.strictEqual(actual, expected);
  });

  test("Test Case 7", function () {
    // prettier-ignore
    const nums1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    // prettier-ignore
      nums2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    const actual = findLength(nums1, nums2);
    const expected = 681;
    assert.strictEqual(actual, expected);
  });
});
