const assert = require("assert");
const { toLinkedList, createTree, TreeNode, ListNode } = require("../lib.js");

// https://leetcode.com/problems/linked-list-in-binary-tree/

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * Given a binary tree root and a linked list with head as the first node.
 *
 * Return True if all the elements in the linked list starting from the head
 * correspond to some downward path connected in the binary tree otherwise return
 * False.
 *
 * In this context downward path means a path that starts at some node and goes downwards.
 * @param {ListNode} head
 * @param {TreeNode} root
 * @return {boolean}
 */
const isSubPath = function (head, root) {
  if (!root) return false;

  const rootNodesToVisit = [];
  if (root.left) {
    rootNodesToVisit.push(root.left);
  }
  if (root.right) {
    rootNodesToVisit.push(root.right);
  }

  let pathNodesToVisit = [];

  /**
   *
   * @param {ListNode} linkNode
   * @param {TreeNode} treeNode
   */
  function check(linkNode, treeNode) {
    // starting from a tree node, check if value matches the one in the current linkNode
    // if so, we start tracking a path
    if (linkNode.val === treeNode.val) {
      if (!linkNode.next) return true; // we've reached the end of the list so we found a path
      if (treeNode.left?.val === linkNode.next.val) {
        pathNodesToVisit.push(treeNode.left);
      }
      if (treeNode.right?.val === linkNode.next.val) {
        pathNodesToVisit.push(treeNode.right);
      }
      const nextTreeNode = pathNodesToVisit.pop();
      if (nextTreeNode) {
        return check(linkNode.next, nextTreeNode);
      }
    }

    // if we've reached here we need to start over from the head of the linked list
    // and using another branch from the tree
    pathNodesToVisit = [];
    const nextTreeNode = rootNodesToVisit.pop();
    if (!nextTreeNode) {
      return false;
    }
    if (nextTreeNode.left) {
      rootNodesToVisit.push(nextTreeNode.left);
    }
    if (nextTreeNode.right) {
      rootNodesToVisit.push(nextTreeNode.right);
    }
    return check(head, nextTreeNode);
  }

  return check(head, root);
};

describe("isSubPath", function () {
  it("Test Case 1", function () {
    const head = toLinkedList([4, 2, 8]);
    // prettier-ignore
    const root = createTree([
      1,
      4,
      4,
      null,
      2,
      2,
      null,
      1,
      null,
      6,
      8,
      null,
      null,
      null,
      null,
      1,
      3,
    ]);
    const actual = isSubPath(head, root);
    const expected = true;
    assert.strictEqual(actual, expected);
  });

  it("Test Case 2", function () {
    const head = toLinkedList([1, 4, 2, 6]);
    const root = createTree([
      1,
      4,
      4,
      null,
      2,
      2,
      null,
      1,
      null,
      6,
      8,
      null,
      null,
      null,
      null,
      1,
      3,
    ]);
    const actual = isSubPath(head, root);
    const expected = true;
    assert.strictEqual(actual, expected);
  });

  it("Test Case 3", function () {
    const head = toLinkedList([1, 4, 2, 6, 8]);
    const root = createTree([
      1,
      4,
      4,
      null,
      2,
      2,
      null,
      1,
      null,
      6,
      8,
      null,
      null,
      null,
      null,
      1,
      3,
    ]);
    const actual = isSubPath(head, root);
    const expected = false;
    assert.strictEqual(actual, expected);
  });

  it("Test Case 4", function () {
    const head = toLinkedList([1, 10]);
    const root = createTree([1, null, 1, 10, 1, 9]);
    const actual = isSubPath(head, root);
    const expected = true;
    assert.strictEqual(actual, expected);
  });
  it("Test Case 5", function () {
    const head = toLinkedList([4, 3, 3, 5, 4, 5, 5, 3, 2, 3, 4, 1, 1, 4, 3, 2, 5, 4, 1, 4]);
    const root = createTree([
      2,
      2,
      4,
      4,
      2,
      2,
      2,
      1,
      3,
      1,
      2,
      4,
      2,
      2,
      3,
      1,
      1,
      5,
      1,
      4,
      2,
      null,
      null,
      2,
      4,
      5,
      1,
      3,
      5,
      2,
      3,
      3,
      null,
      5,
      5,
      3,
      3,
      null,
      null,
      4,
      5,
      2,
      4,
      5,
      2,
      null,
      4,
      3,
      1,
      3,
      1,
      4,
      3,
      5,
      4,
      1,
      2,
      5,
      4,
      null,
      null,
      2,
      null,
      4,
      1,
      2,
      null,
      1,
      null,
      2,
      null,
      1,
      null,
      null,
      5,
      5,
      4,
      4,
      3,
      3,
      4,
      5,
      null,
      1,
      3,
      null,
      3,
      5,
      null,
      1,
      5,
      5,
      5,
      1,
      2,
      1,
      3,
      4,
      1,
      5,
      2,
      null,
      null,
      1,
      3,
      1,
      1,
      2,
      null,
      null,
      3,
      5,
      5,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      2,
      5,
      null,
      5,
      4,
      1,
      null,
      5,
      1,
      5,
      3,
      2,
      4,
      5,
      null,
      null,
      4,
      1,
      2,
      null,
      null,
      null,
      3,
      null,
      5,
      4,
      2,
      5,
      5,
      2,
      3,
      3,
      5,
      5,
      3,
      5,
      3,
      5,
      4,
      2,
      4,
      3,
      2,
      5,
      4,
      null,
      null,
      null,
      3,
      3,
      2,
      4,
      5,
      3,
      null,
      5,
      null,
      null,
      null,
      null,
      4,
      null,
      null,
      1,
      null,
      null,
      2,
      4,
      2,
      null,
      5,
      5,
      4,
      1,
      null,
      null,
      4,
      1,
      5,
      null,
      1,
      null,
      4,
      1,
      4,
      1,
      null,
      3,
      null,
      5,
      null,
      null,
      4,
      1,
      5,
      5,
      null,
      3,
      null,
      null,
      null,
      null,
      null,
      3,
      3,
      5,
      3,
      2,
      4,
      5,
      1,
      2,
      1,
      3,
      2,
      4,
      3,
      4,
      null,
      null,
      null,
      null,
      null,
      5,
      3,
      2,
      4,
      5,
      1,
      5,
      2,
      1,
      1,
      null,
      5,
      1,
      null,
      null,
      3,
      2,
      3,
      1,
      null,
      1,
      null,
      1,
      3,
      null,
      3,
      2,
      2,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      4,
      1,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      5,
      null,
      null,
      null,
      null,
      3,
      2,
      null,
      2,
      3,
      null,
      null,
      null,
      null,
      2,
      3,
      2,
      null,
      null,
      5,
      5,
      4,
      3,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      4,
      2,
      4,
      2,
      1,
      5,
      null,
      null,
      null,
      4,
      null,
      null,
      5,
      3,
      1,
      2,
      5,
      2,
      3,
      1,
      1,
      3,
      4,
      null,
      3,
      3,
      5,
      null,
      3,
      null,
      null,
      1,
      3,
      4,
      2,
      null,
      4,
      1,
      5,
      null,
      3,
      5,
      null,
      null,
      null,
      5,
      null,
      5,
      null,
      2,
      4,
      3,
      null,
      4,
      1,
      5,
      4,
      3,
      2,
      5,
      2,
      null,
      null,
      2,
      null,
      null,
      null,
      null,
      null,
      3,
      5,
      1,
      1,
      null,
      null,
      4,
      null,
      3,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      1,
      3,
      1,
      null,
      null,
      null,
      1,
      null,
      null,
      4,
      2,
      1,
      2,
      4,
      null,
      null,
      4,
      null,
      null,
      3,
      2,
      3,
      null,
      4,
      4,
      3,
      4,
      2,
      5,
      5,
      null,
      null,
      1,
      1,
      5,
      4,
      1,
      4,
      null,
      2,
      3,
      null,
      4,
      1,
      1,
      null,
      null,
      null,
      null,
      5,
      4,
      null,
      null,
      2,
      1,
      5,
      null,
      null,
      4,
      null,
      4,
      null,
      null,
      2,
      null,
      null,
      null,
      null,
      null,
      null,
      2,
      3,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      5,
      5,
      1,
      5,
      1,
      null,
      1,
      3,
      3,
      5,
      null,
      2,
      null,
      4,
      1,
      4,
      null,
      null,
      1,
      1,
      null,
      null,
      1,
      2,
      null,
      2,
      null,
      null,
      5,
      4,
      null,
      null,
      null,
      null,
      5,
      null,
      3,
      null,
      5,
      null,
      5,
      null,
      null,
      4,
      5,
      null,
      4,
      4,
      3,
      1,
      2,
      null,
      null,
      null,
      3,
      null,
      3,
      null,
      null,
      4,
      null,
      null,
      null,
      2,
      null,
      5,
      2,
      2,
      1,
      2,
      null,
      1,
      5,
      null,
      5,
      null,
      null,
      null,
      4,
      1,
      null,
      null,
      4,
      4,
      1,
      4,
      null,
      null,
      null,
      4,
      5,
      null,
      null,
      2,
      null,
      null,
      5,
      3,
      1,
      null,
      1,
      3,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      5,
      1,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      2,
      null,
      null,
      4,
      null,
      null,
      5,
      3,
      5,
      2,
      2,
      null,
      null,
      null,
      4,
      2,
      3,
      null,
      5,
      4,
      2,
      2,
      3,
      4,
      null,
      null,
      null,
      3,
      2,
      1,
      null,
      5,
      null,
      2,
      1,
      null,
      null,
      1,
      null,
      null,
      null,
      3,
      null,
      2,
      null,
      null,
      null,
      null,
      2,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      3,
      4,
      1,
      null,
      1,
      1,
      null,
      1,
      1,
      null,
      null,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      5,
      null,
      null,
      null,
      2,
      4,
      null,
      null,
      4,
      2,
      null,
      null,
      2,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      3,
      1,
      4,
      3,
      3,
      null,
      null,
      1,
      3,
      null,
      null,
      null,
      null,
      4,
      2,
      1,
      null,
      null,
      null,
      null,
      5,
      4,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      4,
      null,
      3,
      4,
      5,
      null,
      2,
      2,
      null,
      null,
      4,
      5,
      2,
      4,
      null,
      3,
      null,
      3,
      null,
      null,
      null,
      null,
      1,
      4,
      null,
      4,
      null,
      null,
      3,
      5,
      2,
      null,
      null,
      3,
      null,
      null,
      null,
      3,
      1,
      5,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      4,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      1,
      3,
      null,
      1,
      null,
      4,
      null,
      null,
      null,
      1,
      5,
      1,
      null,
      null,
      1,
      1,
      null,
      null,
      null,
      2,
      null,
      4,
      null,
      4,
      2,
      2,
      null,
      null,
      2,
      5,
      null,
      null,
      null,
      1,
      null,
      4,
      null,
      null,
      null,
      4,
      3,
      5,
      2,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      4,
      null,
      1,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      1,
      4,
      null,
      4,
      2,
      null,
      null,
      2,
      null,
      3,
      1,
      3,
      null,
      3,
      null,
      null,
      null,
      2,
      null,
      null,
      null,
      null,
      1,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      2,
      null,
      null,
      null,
      5,
      null,
      null,
      null,
      null,
      null,
      4,
      null,
      null,
      5,
      3,
      2,
      3,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      5,
      5,
      null,
      null,
      null,
      null,
      4,
      null,
      3,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      5,
      null,
      null,
      null,
      2,
      null,
      null,
      null,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      3,
      3,
      4,
      null,
      null,
      null,
      null,
      null,
      1,
      null,
      null,
      null,
      null,
      null,
      4,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      1,
    ]);
    const actual = isSubPath(head, root);
    const expected = false;
    assert.strictEqual(actual, expected);
  });

  it("Test Case 6", function () {
    const head = toLinkedList([2, 2, 1]);
    const root = createTree([2, null, 2, null, 2, null, 1]);
    const actual = isSubPath(head, root);
    const expected = true;
    assert.strictEqual(actual, expected);
  });

  it("Test Case 7", function () {
    const head = toLinkedList([10, 2, 3, 3, 5, 8, 3, 10, 7, 5, 5]);
    const root = createTree([
      10,
      4,
      2,
      null,
      2,
      2,
      3,
      null,
      null,
      8,
      3,
      9,
      3,
      9,
      null,
      7,
      null,
      2,
      3,
      5,
      5,
      10,
      1,
      null,
      null,
      9,
      4,
      1,
      7,
      7,
      null,
      8,
      8,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      9,
      10,
      null,
      null,
      null,
      1,
      3,
      5,
      null,
      4,
      8,
      7,
      10,
      null,
      null,
      2,
      10,
      3,
      9,
      5,
      null,
      null,
      null,
      6,
      null,
      6,
      null,
      null,
      null,
      null,
      7,
      null,
      6,
      null,
      null,
      6,
      null,
      null,
      null,
      null,
      3,
      6,
      null,
      5,
      null,
      null,
      null,
      null,
      6,
      null,
      null,
      null,
      5,
      null,
      null,
      null,
      4,
    ]);
    const actual = isSubPath(head, root);
    const expected = true;
    assert.strictEqual(actual, expected);
  });
});
